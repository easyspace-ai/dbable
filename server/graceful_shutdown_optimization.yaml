# 优雅关闭优化配置
# 用于改进服务关闭时的错误处理和资源清理

graceful_shutdown:
  # 关闭超时设置
  timeouts:
    # 业务事件管理器关闭超时
    business_event_manager: '5s'
    # 实时通信服务关闭超时
    realtime_manager: '10s'
    # 数据库连接关闭超时
    database: '15s'
    # Redis连接关闭超时
    redis: '10s'
    # 总体关闭超时
    total: '30s'

  # 关闭顺序优化
  shutdown_order:
    # 1. 停止接收新请求
    - 'http_server'
    # 2. 关闭业务事件管理器（停止Redis订阅）
    - 'business_event_manager'
    # 3. 关闭实时通信服务
    - 'realtime_manager'
    # 4. 关闭JSVM服务
    - 'jsvm_manager'
    # 5. 关闭数据库连接
    - 'database'
    # 6. 最后关闭Redis连接
    - 'redis'

  # 错误处理优化
  error_handling:
    # 忽略的连接关闭错误
    ignore_errors:
      - 'use of closed network connection'
      - 'connection reset by peer'
      - 'broken pipe'
    
    # 记录但继续关闭的错误
    log_and_continue:
      - 'context canceled'
      - 'context deadline exceeded'
    
    # 需要重试的错误
    retry_errors:
      - 'temporary failure'
      - 'network unreachable'

  # 日志优化
  logging:
    # 关闭时的日志级别
    shutdown_log_level: 'info'
    # 是否记录详细的关闭步骤
    detailed_shutdown_logs: true
    # 是否记录错误统计
    error_statistics: true

  # 健康检查
  health_check:
    # 关闭前进行健康检查
    pre_shutdown_check: true
    # 健康检查超时
    health_check_timeout: '5s'
    # 是否等待活跃连接关闭
    wait_for_active_connections: true
    # 活跃连接关闭超时
    active_connections_timeout: '10s'

